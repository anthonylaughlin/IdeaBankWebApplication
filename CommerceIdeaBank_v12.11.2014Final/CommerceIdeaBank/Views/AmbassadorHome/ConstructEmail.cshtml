@model CommerceIdeaBank.Models.ViewModels.Ambassador.AmbassEmailViewModel
@using CommerceIdeaBank.GlobalConstants

@{
    ViewBag.Title = "Construct Email";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (Request.IsAuthenticated)
{
    int role = (int)HttpContext.Current.Session["userRole"];

    if (role == UserRole.AMBASSADOR)
    {
        <h2 class="animated fadeInLeft delay03">Construct an email.</h2>


        string username = (string)HttpContext.Current.Session["currentUser"];
        string sender_email = (string)HttpContext.Current.Session["userEmail"];


        using (Html.BeginForm())
        {
            @Html.ValidationSummary(true,
            "Failed to construct email. Please check your entries below and verify that they're correct. ");

        <div>
            <fieldset>
                <div class="editor-label">
                    @Html.LabelFor(x => x.SendTo)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(x => x.SendTo, null,
                            new { @class = "project_name_text", @defaultValue = Model.SendTo })
                    @Html.ValidationMessageFor(x => x.SendTo)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(x => x.Subject)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(x => x.Subject, null,
                     new { @class = "project_name_text" , @defaultValue = Model.Subject })
                    @Html.ValidationMessageFor(x => x.Subject)
                </div>

                <div class="editor-label">
                    Body:
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(x => x.EmailBody, new { @class = "project_desc_just_text", @defaultValue = Model.EmailBody })
                    @Html.ValidationMessageFor(x => x.EmailBody)
                </div>

                <div>
                    @Html.HiddenFor(model => model.CCTo, new { @Value = Model.CCTo })
                    @Html.HiddenFor(model => model.SentFrom, new { @Value = @sender_email })
                    @*@Html.HiddenFor(model => model.FilesToAttach, new { @Value = Model.FilesToAttach }) *@
                    @Html.HiddenFor(model => model.Priority, new { @Value = System.Net.Mail.MailPriority.Low })
                </div>

                <input type="submit" class="submit_button button" value="Send Email" formaction="CreateEmail" />

            </fieldset>
        </div>
        }
        
    }
    else if (role == UserRole.ADMIN)
    {
        //Redirect erroneous admin to correct page
        Response.Redirect(Url.Action(ActionName.AN_CONSTRUCT_EMAIL, PermissionSpace.PS_ADMIN_HOME, new { user_email = @Model.SendTo }));
    }
    else
    {
        //Error. Permissions invalid. Log user off and redirect to default home
        Response.Redirect(Url.Action(ActionName.AN_PERMISSIONS_INVALID, PermissionSpace.PS_AMBASSADOR_HOME));
    }
}
else
{
    //If user not authenticated, route to default home
    Response.Redirect(Url.Action(ActionName.AN_INDEX, PermissionSpace.PS_DEFAULT_HOME));
}